//$ dom.flx - light sugar over xml2 library for cleaner syntax and composition
//$ Author Mike Maul
//$ See README.md for more details

class DOM {
  open XML2;

  typedef dom_node = xml_node_ptr;

  publish """"Parses string well formed XML fragment and returns handle
   to internal representation"""

  fun parse (txt:string):xml_node_ptr =>
    xml_doc_get_root_element(xml_parse_string(txt));
  
  fun parse_file(fname:string):xml_node_ptr =>
    xml_doc_get_root_element(xml_parse_file(fname));

  fun new_node (name:string) => xml_new_node(name);
 
  fun new_node (name:string,text:string) =>
    (xml_new_node(name)).set_text(text);

  fun new_text_node (text:string) => 
    xml_new_text(text);

  proc do_add_child(node:xml_node_ptr) (child:xml_node_ptr) {
     C_hack::ignore(node.add_child(child));
  }

  fun add_child(node:xml_node_ptr) (child:xml_node_ptr) = {
     C_hack::ignore(xml_add_child(node,child)); return node;
  }

  proc do_add_cdata (node:xml_node_ptr) (txt:string) {
    C_hack::ignore(node.add_cdata (txt));
  }

  fun add_cdata (node:xml_node_ptr) (txt:string) =>
    node.add_child(xml_new_cdata_block (*node.doc,txt));
  

  fun set_text (node:xml_node_ptr) (txt:string) =  {
    xml_node_set_content (node,txt);
    return node;
  }
  
  proc do_set_text (node:xml_node_ptr) (txt:string) {
    xml_node_set_content (node,txt);
  }


  fun get_text (node:xml_node_ptr) =>  xml_char_ptr_to_str(xml_node_get_content(node));

  proc replace (old:xml_node_ptr) (n:xml_node_ptr) {
    xml_replace_node_p(old,n);
  }

  fun add_next (node:xml_node_ptr) (sibling:xml_node_ptr) = {
    node.do_add_next(sibling); return node;
  }

  proc do_add_next (node:xml_node_ptr) (sibling:xml_node_ptr) {
    C_hack::ignore(xml_add_next_sibling(node,sibling));
  }

  fun add_prev (node:xml_node_ptr) (sibling:xml_node_ptr) = {
    node.do_add_prev(sibling); return node;
  }

  proc do_add_prev (node:xml_node_ptr) (sibling:xml_node_ptr) {
    C_hack::ignore(xml_add_prev_sibling(node,sibling));
  }

  fun set_prop (node:xml_node_ptr) (name:string,value:string) = {
    C_hack::ignore(xml_set_prop(node,name,value));
    return node;
  }

  proc do_set_prop (node:xml_node_ptr) (name:string,value:string) {
    C_hack::ignore(xml_set_prop(node,name,value));
  }
  
  fun set_props (node:xml_node_ptr) (props:list[string*string]) = {
    iter (proc (p:string*string) { node.do_set_prop(p.(0),p.(1)); }) props;
    return node;
  }

  proc do_set_props (node:xml_node_ptr) (props:list[string*string]) {
    iter (proc (p:string*string) { node.do_set_prop(p.(0),p.(1)); }) props;
  }

  fun get_prop (node:xml_node_ptr) (name:string) =>
    xml_get_prop(node,name);
  
  fun has_prop (node:xml_node_ptr) (name:string,value:string) =>
    node.node_has_attribute_with_value(name,value); 
  
  fun has_prop (name:string,value:string) (node:xml_node_ptr) =>
    node.node_has_attribute_with_value(name,value); 

  fun has_name (name:string) (node:xml_node_ptr) =>
    node_with_name (name) (node);

  fun has_name  (node:xml_node_ptr) (name:string) =>
    node_with_name (name) (node);

  fun find_nodes (node:xml_node_ptr) (pred:xml_node_ptr->bool) =>
    xml_find_all_nodes (pred,node);

  proc adopt_children(adoptor:xml_node_ptr) (donor:xml_node_ptr) {
    adoptor.do_add_child (xml_copy_node_list(*donor.children));
  }

  fun + (x:xml_node_ptr, y: xml_node_ptr):xml_node_ptr => x.add_next(y);

  fun / (x:xml_node_ptr, y: xml_node_ptr):xml_node_ptr => x.add_child(y);

  
}