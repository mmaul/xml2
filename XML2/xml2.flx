//$ xml2.flx - libxml2 binding for Felix
//$ Author Mike Maul
//$ See README.md for more details

class XML2_ {
  open C_hack;
  requires package "libxml";
//----------------------------------- utility fns
  fun isNull[t]: t -> bool = "(0==$1)";
  proc hex_of[t]: t = """printf("(HEX:%x)",(unsigned int)$1);""";
  const Null[t]:t = "NULL";
  fun tostr (s:xml_char_ptr) => string(char_ptr_of_xml_char_ptr(s));
//----------------------------------- global definitions
  type xml_doc_ptr = "xmlDocPtr";
//----------------------------------- parser definitions
  fun xml_parse_file:string->xml_doc_ptr = "xmlParseFile($1.c_str())";

  fun xml_parse_string:string -> xml_doc_ptr = "xmlParseMemory($1.c_str(),$1.length())";

  fun html_parse_file:string->xml_doc_ptr = "htmlParseFile($1.c_str())";

  fun html_parse_string:string -> xml_doc_ptr = "htmlParseDoc((xmlChar *)$1.c_str(),NULL)";

  private fun equals (s1:string) (s2:string) => s1 == s2;
cenum xmlParserOption = 
    XML_PARSE_RECOVER,// = 1,  : recover on errors
    XML_PARSE_NOENT,// = 2,  : substitute entities
    XML_PARSE_DTDLOAD,// = 4,  : load the external subset
    XML_PARSE_DTDATTR,// = 8.  : default DTD attributes
    XML_PARSE_DTDVALID,// = 16,  : validate with the DTD
    XML_PARSE_NOERROR,// = 32 : suppress error reports
    XML_PARSE_NOWARNING,// = 64 : suppress warning reports
    XML_PARSE_PEDANTIC,// = 128 : pedantic error reporting
    XML_PARSE_NOBLANKS,// = 256 : remove blank nodes
    XML_PARSE_SAX1,// = 512 : use the SAX1 interface internally
    XML_PARSE_XINCLUDE,// = 1024 : Implement XInclude substitition
    XML_PARSE_NONET,// = 2048 : Forbid network access
    XML_PARSE_NODICT,// = 4096 : Do not reuse the context dictionnary
    XML_PARSE_NSCLEAN,// = 8192 : remove redundant namespaces declarations
    XML_PARSE_NOCDATA,// = 16384 : merge CDATA as text nodes
    XML_PARSE_NOXINCNODE,// = 32768 : do not generate XINCLUDE START/END nodes
    XML_PARSE_COMPACT,// = 65536 : compact small text nodes; no modification of the tree allowed afterwards (will possibly crash if you try to modify the tree)
    XML_PARSE_OLD10,// = 131072 : parse using XML-1.0 before update 5
    XML_PARSE_NOBASEFIX,// = 262144 : do not fixup XINCLUDE xml:base uris
    XML_PARSE_HUGE,// = 524288 : relax any hardcoded limit from the parser
    XML_PARSE_OLDSAX; // = 1048576 : parse using SAX2 interface from before 2.7.0
  typedef xml_parser_option = xmlParserOption;

  publish "parses string document fragment in context of supplied node xml_parse_errors"
  gen xml_parse_in_node_context: xml_node_ptr*string*xml_parser_option*xml_node_ptr->int = 
    "(int)xmlParseInNodeContext($1,$2.c_str(),(int)$2.length(),$3,&$4)";
  
//------------------------------------ tree definitions
  
  type xml_ns_ptr   = "xmlNsPtr";
  type void_ptr     = "void *";
  type xml_dtd_ptr  = "xmlDtdPtr";
  type xml_element_type = "xmlElementType";

  cstruct xmlNode {
     _private:void_ptr;	    //application data
    type:xml_element_type;  // XML_ATTRIBUTE_DECL, must be second !
    name:xml_char_ptr;      // Attribute name
    children:xml_node_ptr;  // NULL
    last:xml_node_ptr;      // NULL
    parent:xml_dtd_ptr;	    // -> DTD
    next:xml_node_ptr;      // next sibling link
    prev:xml_node_ptr;      // previous sibling link
    doc:xml_doc_ptr;        // the containing document
    ns:xml_ns_ptr;          // pointer to the associated namespace
    content:xml_char_ptr;   // the content
    properties:xml_attr_ptr;// properties list
    nsDef:xml_ns_ptr;       // namespace definitions on this node
    psvi:void_ptr;          // for type/PSVI informations
    line:ushort;            // line number
    extra:ushort;           // extra data for XPath/XSLT
  };

  typedef xml_node = xmlNode;
  typedef xml_node_ptr = &xml_node;

  type xml_attribute_type = "xmlAttributeType";

    cstruct xmlAttr {
     _private:void_ptr;	    //application data
    type:xml_element_type;  // XML_ATTRIBUTE_DECL, must be second !
    name:xml_char_ptr;      // Attribute name
    children:xml_node_ptr;  // NULL
    last:xml_node_ptr;      // NULL
    parent:xml_dtd_ptr;	    // -> DTD
    next:xml_node_ptr;      // next sibling link
    prev:xml_node_ptr;      // previous sibling link
    doc:xml_doc_ptr;        // the containing document
    ns:xml_ns_ptr;          // pointer to the associated namespace
    atype:xml_attribute_type;   // the attribute type if validating
    psvi:void_ptr;          // for type/PSVI informations
  };

  typedef xml_attr = xmlAttr;
  typedef xml_attr_ptr = &xmlAttr;


  header """
    int xml_doc_dump_helper(const char *filename,xmlDocPtr cur) {
      FILE *f = fopen(filename,"w");
      int result = xmlDocDump(f,cur);
      fclose(f);
      return result;
    }
  """;
  gen xml_doc_dump: string*xml_doc_ptr->int = "xml_doc_dump_helper($1.c_str(),$2)";
 
  type xml_char_ptr = "xmlChar *";  
  proc xml_free:xml_char_ptr = "xmlFree($1);";
  gen xml_char_ptr_to_str: xml_char_ptr->string = "std::string(($1==NULL)\?\"\":(const char *)$1)";
  proc xml_free_node:xml_node_ptr = "xmlFreeNode($1);";

  proc xml_free_node_list: xml_node_ptr = "xmlFreeNodeList($1);";  

  publish """
Dump an XML document in memory and return the #xmlChar * and it's size in bytes. It's up to the caller to free the memory with xml_free(). The resulting byte array is zero terminated, though the last 0 is not included in the returned size.
cur:	the document
mem:	OUT: the memory pointer
size:	OUT: the memory length
"""
  proc xml_doc_dump_memory: xml_doc_ptr*&xml_char_ptr*&int = 
    "xmlDocDumpMemory($1,$2,$3);";
  fun char_ptr_of_xml_char_ptr: xml_char_ptr -> +char = "(char *)$1:cast" is cast;
  fun xml_char_ptr_of_char_ptr: +char -> xml_char_ptr = "(xmlChar *)$1:cast" is cast;
  fun xml_node_ptr_of_xml_dtd_ptr: xml_dtd_ptr -> xml_node_ptr = "(xmlNodePtr)$1:cast" is cast;
  fun xml_node_ptr_of_xml_doc_ptr: xml_doc_ptr -> xml_node_ptr = "(xmlNodePtr)$1:cast" is cast;
  publish "Helper for xml_doc_dump_memory"
  gen xml_doc_dump(cur:xml_doc_ptr):string = {
    var str_doc:xml_char_ptr;
    var size:int;
    xml_doc_dump_memory(cur,(&str_doc),&size);
    val ret = string(char_ptr_of_xml_char_ptr(str_doc));
    xml_free(str_doc);
    return ret;
  }   
  
  //open Str[xml_char_ptr];
  gen xml_new_doc: string->xml_doc_ptr = "xmlNewDoc((const xmlChar *)($1.c_str()))";  

/* Doesn't seem to work for traditional HTML doctype 
   xml_new_dtd(xml_doc3,"HTML","http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd","-//W3C//DTD XHTML 1.0 Strict//EN");
  renders public and system ID's in wrong order:<!DOCTYPE HTML PUBLIC "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" "-//W3C//DTD XHTML 1.0 Strict//EN">*/

  gen xml_new_dtd: xml_doc_ptr*string*string*string->xml_dtd_ptr = 
    "xmlNewDtd($1,(const xmlChar *)$2.c_str(),(const xmlChar *)$3.c_str(),(const xmlChar *)$4.c_str())";

  gen xml_create_int_subset: xml_doc_ptr*string*string*string->xml_dtd_ptr = "xmlCreateIntSubset($1,(const xmlChar *)$2.c_str(),(const xmlChar *)$3.c_str(),(const xmlChar *)$4.c_str())";

  gen xml_new_html_dtd: xml_doc_ptr->xml_dtd_ptr = 
    """xmlNewDtd($1,(const xmlChar *)"HTML",NULL,NULL)""";

  gen xml_parse_local_dtd: string->xml_dtd_ptr = 
    "xmlParseDTD(NULL,(const xmlChar *)$1.c_str())";

  gen xml_parse_external_dtd: string->xml_dtd_ptr = 
    "xmlParseDTD((const xmlChar *)$1.c_str(),NULL)";

  publish " xml"
  gen xml_new_node: xml_ns_ptr*string->xml_node_ptr = 
    "xmlNewNode($1,(const xmlChar *)($2.c_str()))";

  gen xml_new_node: string -> xml_node_ptr = 
    "xmlNewNode(NULL,(const xmlChar *)($1.c_str()))";
  
  gen xml_new_ns: xml_node_ptr*string*string->xml_ns_ptr = "xmlNewNs($1,(const xmlChar *)$2.c_str(),(const xmlChar *)$3.c_str())";

  gen xml_new_text: string->xml_node_ptr = "xmlNewText((const xmlChar *)$1.c_str())";

  gen xml_add_child: xml_node_ptr*xml_node_ptr->xml_node_ptr = "xmlAddChildList($1,$2)";

  publish "parent:xml_node_ptr,namespace:xml_ns_ptr,name:string,content:string";
  gen xml_new_child: xml_node_ptr*xml_ns_ptr*string*string->xml_node_ptr=
    "xmlNewChild($1,$2,(const xmlChar *)($3.c_str()),(const xmlChar *)($4.c_str()))";

  publish "parent:xml_node_ptr,namespace:xml_ns_ptr,name:string,content:string";
  gen xml_new_text_child: xml_node_ptr*xml_ns_ptr*string*string->xml_node_ptr=
    "xmlNewTextChild ($1,$2,(const xmlChar *)($3.c_str()),(const xmlChar *)($4.c_str()))";

  gen xml_doc_get_root_element: xml_doc_ptr->xml_node_ptr ="xmlDocGetRootElement($1)";

  proc xml_doc_set_root_element: xml_doc_ptr*xml_node_ptr = 
    "xmlDocSetRootElement($1,$2);";


  gen xml_new_cdata_block: xml_doc_ptr*string->xml_node_ptr = "xmlNewCDataBlock($1,(const xmlChar *)$2.c_str(),$2.length())";

  gen xml_node_get_content: xml_node_ptr->xml_char_ptr = "xmlNodeGetContent($1)";


  proc xml_node_set_content: xml_node_ptr*xml_char_ptr = "xmlNodeSetContent($1,$2);";

  proc xml_node_set_content: xml_node_ptr*string = "xmlNodeSetContent($1,(const xmlChar *)$2.c_str());";

  gen xml_add_next_sibling: xml_node_ptr*xml_node_ptr->xml_node_ptr = "xmlAddNextSibling($1,$2)";

  gen xml_add_prev_sibling: xml_node_ptr*xml_node_ptr->xml_node_ptr = "xmlAddPrevSibling($1,$2)";

  gen xml_add_sibling: xml_node_ptr*xml_node_ptr->xml_node_ptr = "xmlAddSibling($1,$2)";

  header """ 
  std::string xml_encode_special_chars_helper(const xmlChar *input) {
    xmlDocPtr doc = xmlNewDoc((const xmlChar *)"");
    xmlChar *enc =  xmlEncodeSpecialChars(doc,input);
    std::string ret = std::string((const char *)enc);
    xmlFree(enc);
    xmlFreeDoc(doc);
    return ret;
  }
  """;

  gen xml_encode_special_chars: string->string = "xml_encode_special_chars_helper((const xmlChar *)$1.c_str())";

 
  publish " replaces old node with new node. Old not must be destroyed with xml_free_node "
  gen xml_replace_node: xml_node_ptr*xml_node_ptr->xml_node_ptr = "xmlReplaceNode($1, $2)";

  publish "replaces old node with new node and destroys old node"
  proc xml_replace_node_p (old:xml_node_ptr,cur:xml_node_ptr) {
    val o = xml_replace_node(old,cur);
    if not isNull[xml_node_ptr](o) do xml_free_node(o); done
  }
 
  gen xml_set_prop: xml_node_ptr*xml_char_ptr*xml_char_ptr->xml_attr_ptr =
    "xmlSetProp($1,$2,$3)";

  gen xml_set_prop (node:xml_node_ptr,name:string,value:string):xml_attr_ptr = {
    return xml_set_prop(node,xml_char_ptr_of_char_ptr(cstr(name)),xml_char_ptr_of_char_ptr(cstr(value)));
  }

  gen xml_get_prop: xml_node_ptr * xml_char_ptr -> xml_char_ptr = "xmlGetProp($1,$2)";

  gen xml_get_prop (node:xml_node_ptr,name:string):opt[string] = {
    var prop = xml_get_prop(node,(xml_char_ptr_of_char_ptr(cstr(name))));
    val ret = if isNull[xml_char_ptr](prop) then
      None[string]
    else
      Some(string(char_ptr_of_xml_char_ptr(prop)))    
    endif;
    xml_free(prop);
    return ret;  
  }

  proc xml_free_doc: xml_doc_ptr = "xmlFreeDoc($1);";

 /* gen iterator (var doc:xml_doc_ptr) () = {
    var node = xml_doc_get_root_element(doc);
    gen wrkr(n:xml_node_ptr) ={
      yeild n;
      if not isNull[xml_node_ptr]((*n).children) do 
        wrkr(*n.children);
      done
      if not isNull[xml_node_ptr]((*n).next) do
        wrkr(*n.next);
      done
    }
    yeild wrkr(node);
  }*/


  fun xml_find_all_nodes (pred:xml_node_ptr->bool,node:xml_node_ptr):list[xml_node_ptr] = {
    var found = Empty[xml_node_ptr];
    fun wrkr(n:xml_node_ptr) ={
      if pred(n) do
        found = Cons(n,found);
      done
      if not isNull[xml_node_ptr]((*n).children) do 
        wrkr(*n.children);
      done
      if not isNull[xml_node_ptr]((*n).next) do
        wrkr(*n.next);
      done
    }
    wrkr(node);
    return found;
  }
  
  gen xml_find_all_in_doc (pred:xml_node_ptr->bool,doc:xml_doc_ptr):list[xml_node_ptr] = {
    var node = xml_doc_get_root_element(doc);
    return xml_find_all_nodes (pred,node); 
  }

  fun node_has_attribute (name:string) (node:xml_node_ptr):bool =>
  if not isNull[xml_node_ptr](node) then 
    match xml_get_prop(node,name) with
      |Some _ => true
      |_      => false
    endmatch
  else
    false
  endif;

  fun node_has_attribute_with_value_where (name:string,pred:(string->bool)) (node:xml_node_ptr):bool =>
  if not isNull[xml_node_ptr](node) then 
    match xml_get_prop(node,name) with
      |Some ?a => pred(a)
      |_      => false
    endmatch
  else
    false
  endif;

  fun node_has_attribute_with_value (node:xml_node_ptr) (name:string,value:string) =>
    node_has_attribute_with_value_where (name,equals(value)) node;

  fun node_with_name (name:string) (node:xml_node_ptr):bool =>
    if not isNull[xml_node_ptr](node) and 
       not isNull[xml_char_ptr](*node.name) and
       tostr(*node.name) == name then true else false endif; 
header """
/*
xmlChar *	xmlURIEscapeStr		(const xmlChar * str, 
					 const xmlChar * list)
char *	xmlURIUnescapeString		(const char * str, 
					 int len, 
					 char * target)
*/

std::string  xmlURIEscapeStringHelper(std::string str,std::string list) {
  char *estr = (char *)xmlURIEscapeStr((const xmlChar*)str.c_str(),(const xmlChar *)list.c_str());
  std::string ret =  std::string(estr);
  //xmlFree(estr);
  return ret;
}

std::string  xmlURIUnescapeStringHelper(std::string str) {
  char *target = (char *)malloc(sizeof(char)*str.length()+32);
  char *ustr = xmlURIUnescapeString(str.c_str(),0,target);
  size_t i = 0;
  for(i=0;i<strlen(ustr);i++) {
    if(target[i] == '+') { target[i] = ' ';}
  }
  std::string ret =  std::string(target);
  free(target);
  return(ret);
}
""";
fun xml_uri_escape_string:string*string->string = "xmlURIEscapeStringHelper($1,$2)";
fun xml_uri_unescape_string:string->string = "xmlURIUnescapeStringHelper($1)";


/*Function: xmlCopyNode
Do a copy of the node.
node:	the node
extended:	if 1 do a recursive copy (properties, namespaces and children when applicable) if 2 copy properties and namespaces (when applicable)
Returns:	a new #xmlNodePtr, or NULL in case of error.
*/
fun xml_copy_node: xml_node_ptr*int->xml_node_ptr = "xmlCopyNode($1,$2)"; 

/*
Function: xmlCopyNodeList
*/
fun xml_copy_node_list: xml_node_ptr->xml_node_ptr ="xmlCopyNodeList($1)";


}


